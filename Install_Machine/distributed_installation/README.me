

### INSTALLATION AND CONFIGURATION OF HOST MACHINE ###

Before make any installation, we have to configure the three machine.
We must have three machine, with Ubuntu installed and to be accessed by internet.
From your local machine, you can connect to machine with your private key created bay ssh-keygen.
We have to give them hostname so we can configure certificat for Https access.

## Get SSL Certificate ##

If you want an ssl certication for one of your machine.

- Give a domaine name to your machine.
- In ./parametres_machine.sh put to True the option *_SSL. 
  Each machine has this parameters.
- In ./parametres_machines.sh, for the parameters *_host_adresse, give the domain name and not the ip adresse.
- During deployment, you have to give the local container port *_docker_local_port 443. If no, 8000.

The nginx config file of the container are in projet/source/django/nginx_config/. One file for ssl and
one for no ssl.

## Set Parameters ##


# machine host parameters #

The parameters are in ./parametres_machine.sh and are about the machine host.

To make connection, we need the name of the user of the machine and its ip adress
-> user_name= name of the user
-> host_adresse= ip adresse of host.
Example:
user_name=ubuntu
host_adresse=195.15.243.254

For ssl protocol, we have to give the domaine name and not the ip adresse.

To make connection, we use private key. We need to give absolute path to file with this private key.
-> private_key_path= absolute_path_to_private_key_file
Example:
private_key_path=/home/fatih/.ssh/host_private_key

We have to indicate by which port we will connect to our app
-> host_port= port number
Example:
host_port=8000

We have to define the number max of thread than the machine can manage in parallel.
Example:
max_thread=4

We have to give the name of each certificate file in docker_volume for the https protocol.
Example:
ssl_full_chain=fullchain.pem
ssl_privkey=privkey.pem
ssl_option=options-ssl-nginx.conf
dhparam=ssl-dhparams.pem

For each machine, UI_Front, BackEnd and DataBase, we have to give the parameters.

# Database parameters #

The parameters are in ./parametres_BD.sh and permit to configure the PostGreSQL database.
We need to give a database name, a user and a password. These data must be the ones of our Django
project if we want Django can make connection to our database.

Example:
db_name=test
db_user_name=fatih
password=1234


# settings.py parameters #

The parameters are in ./parametres_settings.sh and it defines some variable to add to settings file of django "settings.py".

-> NUMBER_THREADS_ALLOWED= the number of thread that is allowed for each research
-> NUMBER_TRIALS= the number of trials to make during clustering

-> X_INTERVAL_LITTLE=
-> Y_INTERVAL_LITTLE= x,y interval for the plot if number of article is < 10'000

-> X_INTERVAL_BIG=
-> Y_INTERVAL_BIG= x,y interval for the plot if number of article is >= 10'000

-> NUMBER_ARTICLE_BY_PAGE= number of article by page in the table_choice page.

-> SSL=True For each machine, we set if it use ssl or not

## Installation and Configuration ##


To prepare the host machine, we simply launch the script ./install.sh .
We will describe what it does.

- As our app use docker container, we install docker in the host. We create a directory and make it a docker volume where our container
would read and write files.

- We install Postgresql and create database by using scripts ./install_PostGreSQL.sh . We configure and exchange the file pg_hba.conf
with ours so the database accept connections

- We create a file with all option for our app and send it to the host

For each machine, we do the same thing. Only in the DataBase host, we install PostgreSQL.
If you change some parameters, you have to execute the script again before deployment.

### Deployment of the app ###

Usually, the Continous deployment is done with travis. But if Travis don't function, we can use the script ./deploiement.sh .

## Parameters ##

The parameters are in ./parametres_deploiement.sh.

-> repository_name= name of the git repository
-> repository_url= url of the git repository
-> path_to_dockerfile= path in repository where is the DockerFile

-> docker_image_name= name of the docker image. It must respect naming rule of DockerHub. 
Example : khptif/systematic_review:latest

-> docker_container_name= the name gave to the container with our app in the host

-> docker_local_port= the port in the container that the app listens.
Example: container is launch with -p 3000:6000, we have to give docker_local_port=6000

We have to give data for each module. One module has his own docker image and container name. If you want to deploy one of the module, you can set "deploy" variable for each module. For ssl, local container port is 443.

## Deployment ##

To deploy, start the script ./deploiement.sh after that we update the git repository.
It will clone the repository in local, build the docker image, push to dockerhub, delete local repository,
delete the current container in host, delete local image in host and launch the container.
For security, the password of DockerHub has to be manually given.




